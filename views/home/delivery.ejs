<!-- 
	
	Home.Delivery

	* This file is the manage table for the active deliveries

 -->

<div class="container">
  <div class="row">
    <h1>
    	<a href="/"><%= __('Home') %></a> / 
    	<a href="/delivery"><%= __('Deliveries') %></a>
    </h1>
  </div>

	<div class="row">
		<div class="col-sm-6">
			<p>
			<b><%= __('Delivery.Empty') %>:</b> <span class="bg-warning">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;
			<b><%= __('Delivery.Active') %>:</b> <span class="bg-info">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;
			<b><%= __('Delivery.Full') %>:</b> <span class="bg-success">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;</p>
		</div>
	</div>
	<div class="row">
		<div class="col-md-12 col-xs-12">
		
			<div class="table-responsive">
				<table class="table table-hover table-striped" id="deliveriesTable">
					<caption style="position: relative;">
					</caption>
					<thead>
						<tr>
							<th><%= __('Delivery.Table.id') %></th>
							<th><%= __('Delivery.Table.createdAt') %></th>
							<th><%= __('Delivery.Table.wagon_count') %></th>
							<!-- <th><%= __('Delivery.Table.baril_count') %></th> -->
							<!-- <th><%= __('Delivery.Table.actions') %></th> -->
							<th>&nbsp;</th>
						</tr>
					</thead>
					<tbody id="deliveries">
						<% deliveries.forEach(function (delivery) { %>
							<tr class="<% switch(delivery.status) { case sails.config.k1.DELIVERY_STATUS.IN_PROGRESS: %>status<% break; } %> " id="<%= delivery.id %>">
								<td class="delivery-id"><%= delivery.id %></td>
								<td class="delivery-id"><%= Utils.formatDate(delivery.createdAt) %></td>
								<td class="delivery-wagon_count"></td>
								<!-- <td class="delivery-baril_count"></td> -->
								<td class="delivery-destroy">
									<div class="btn-group">
									  <button type="button" class="btn btn-default dropdown-toggle delivery-actions" data-toggle="dropdown">
									    <%= __('Delivery.Dropdown.Actions') %> <span class="caret"></span>
									  </button>
									  <ul class="dropdown-menu" role="menu">
									  	<li><a href="/delivery/station/<%= delivery.id %>"><%= __('Continue') %></a></li>
									    <li>
									    	<a href="/delivery/tasks/<%= delivery.id %>"><%= __('Tasks') %></a>
									    </li>
									    
									    <li><a href="javascript:;" data-id="<%= delivery.id %>" class="archive-link"><%= __('Delivery.Dropdown.Actions.Archive') %></a></li>
									    <li class="destroy-link">
									    	<a href="javascript:;" data-id="<%= delivery.id %>" class="delivery-delete-btn"><%= __('Delivery.Dropdown.Actions.Destroy') %></a>
									    </li>
									  </ul>
									</div>
								</td>
							</tr>
						<% }) %>
					</tbody>
				</table>
			</div>

		</div>
	</div>
</div>



<script type="text/javascript">
window.addEventListener('load', function () {


	$('#deliveries tr').on('click', function (e) {
		if (e.target.nodeName == 'TD') {
			e.preventDefault();
			var id = $(this).find('.delivery-id').html();
			window.location='/delivery/station/' + id;
			return;		
		}
	});


	$('.delivery-delete-btn').on('click', function (e) {
		e.preventDefault();
		var delivery = $(this).attr('data-id');

		socket.get('/_api/delivery/wagoncount', { delivery: delivery }, function (response) {
			if (response.error) return console.log(response.error);
			if (response.count > 0) {
				var alert = new WindowAlert();
				alert.setMessage('.empty-delivery-message');
				alert.show();
			}
			else {
				var confirm = new WindowConfirm();
				confirm.setMessage('.confirm-delete-delivery-message');
				confirm.setConfirm(function () {
					socket.delete('/_api/delivery/' + delivery, function (delivery) {
						$('#' + delivery.id).remove();
					});
				});
				confirm.show();
			}
		});
	});




	$('#deliveries tr').each(function (i, tr) {
		var $row = $(this);
		var id = $(this).attr('id');
		var $wagonCountElement = $(this).find('.delivery-wagon_count');
		var $barilCountElement = $(this).find('.delivery-baril_count');
		socket.get('/_api/delivery/wagoncount', { delivery: id }, function (response) {
			$wagonCountElement.html(response.count);
			switch(response.count) {
				case 0  : $row.addClass('warning'); break;
				case 60 : $row.addClass('success'); break;
				default: $row.addClass('info'); break;
			}
		});

	});



	$('.archive-link').on('click', function (e) {
		e.preventDefault();
		var delivery = $(this).attr('data-id');

		var reports = {};

		get_report_status('transfer', delivery, function (status) {
			reports['transfer'] = status;
			get_report_status('inspection', delivery, function (status) {
				reports['inspection'] = status;
				get_report_status('seal', delivery, function (status) {
					reports['seal'] = status;
					get_report_status('offload', delivery, function (status) {
						reports['offload'] = status;
						get_report_status('mesure', delivery, function (status) {
							reports['mesure'] = status;

							var incompleteReports = [];


							$.each(reports, function (report, status) {
								if (status == 'incomplete') {
									incompleteReports.push(report);
								}
							});
							// console.log(incompleteReports.length);

							if (incompleteReports.length < 1) {
					      var confirm = new WindowConfirm();
					      confirm.setMessage('.confirm-archive-delivery-message');
					      confirm.setConfirm(function () {
					        socket.post('/_api/delivery/archive', { delivery: delivery }, function (response) {
					          if (response.error) return console.log(response.error);
					          if (response.url) return window.location.href = response.url;
					        })
					      });
					      confirm.show();
							}
							else {
					      reports.delivery = delivery;
					      var alert = new WindowAlert();
					      alert.setMessage('.cannot-archive-message', reports);
					      alert.show();
					      con
							}
						});
					});
				});
			});
		});
	});





})



function get_report_status (report, delivery, cb) {
	socket.get('/_api/report/' + report + 'iscomplete', { delivery: delivery }, function (response) {
    if (response.error) return console.log(response.error);
    return response.isComplete ? cb('complete') : cb('incomplete');
	})
}


</script>









